require("dotenv").config();
const { Telegraf } = require("telegraf");
const fs = require("fs");

const BOT_TOKEN = process.env.TELEGRAM_TOKEN;
if (!BOT_TOKEN) {
    throw new Error("‚ùå TELEGRAM_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –î–æ–¥–∞–π –π–æ–≥–æ —É –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.");
}

const bot = new Telegraf(BOT_TOKEN);

let settings = {
    totalPeople: null,
    people: [],
    drinkers: [],
    bathCost: null,
    foodExpenses: {},
    alcoholExpenses: {},
    waitingFor: null
};

if (fs.existsSync("data.json")) {
    settings = JSON.parse(fs.readFileSync("data.json"));
}

function saveData() {
    fs.writeFileSync("data.json", JSON.stringify(settings, null, 2));
}

bot.start((ctx) => {
    ctx.reply("–ü—Ä–∏–≤—ñ—Ç! –î–∞–≤–∞–π —Ä–æ–∑—Ä–∞—Ö—É—î–º–æ –≤–∏—Ç—Ä–∞—Ç–∏. –°–∫—ñ–ª—å–∫–∏ –ª—é–¥–µ–π –±—É–ª–æ –≤ –±–∞–Ω—ñ?");
    settings = { totalPeople: null, people: [], drinkers: [], bathCost: null, foodExpenses: {}, alcoholExpenses: {}, waitingFor: "totalPeople" };
    saveData();
});

bot.on("text", (ctx) => {
    let text = ctx.message.text.trim().toLowerCase();

    if (settings.waitingFor === "totalPeople") {
        let number = parseInt(text);
        if (!isNaN(number) && number > 0) {
            settings.totalPeople = number;
            settings.people = [];
            settings.waitingFor = "peopleNames";
            ctx.reply(`–í–≤–µ–¥—ñ—Ç—å —ñ–º–µ–Ω–∞ –≤—Å—ñ—Ö ${number} —É—á–∞—Å–Ω–∏–∫—ñ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º).`);
            saveData();
        } else {
            ctx.reply("‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π.");
        }
        return;
    }

    if (settings.waitingFor === "peopleNames") {
        settings.people.push(text.charAt(0).toUpperCase() + text.slice(1));
        if (settings.people.length < settings.totalPeople) {
            ctx.reply("‚úÖ –î–æ–¥–∞–Ω–æ! –í–≤–µ–¥—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–µ —ñ–º'—è.");
        } else {
            settings.waitingFor = "drinkers";
            ctx.reply("–•—Ç–æ –≤–∂–∏–≤–∞–≤ –∞–ª–∫–æ–≥–æ–ª—å? –í–≤–µ–¥—ñ—Ç—å —ñ–º–µ–Ω–∞ (–ø–æ –æ–¥–Ω–æ–º—É –∑–∞ —Ä–∞–∑). –ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à—ñ—Ç—å '–ì–æ—Ç–æ–≤–æ'.");
        }
        saveData();
        return;
    }

    if (settings.waitingFor === "drinkers") {
        if (text === "–≥–æ—Ç–æ–≤–æ") {
            settings.waitingFor = "bathCost";
            ctx.reply("–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É–≤–∞–ª–∞ –±–∞–Ω—è?");
        } else if (settings.people.includes(text.charAt(0).toUpperCase() + text.slice(1))) {
            settings.drinkers.push(text.charAt(0).toUpperCase() + text.slice(1));
            ctx.reply(`‚úÖ ${text} –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É —Ç–∏—Ö, —Ö—Ç–æ –≤–∂–∏–≤–∞–≤ –∞–ª–∫–æ–≥–æ–ª—å.`);
        } else {
            ctx.reply("‚ùå –¢–∞–∫–æ–≥–æ —ñ–º–µ–Ω—ñ –Ω–µ–º–∞—î —Å–µ—Ä–µ–¥ —É—á–∞—Å–Ω–∏–∫—ñ–≤.");
        }
        saveData();
        return;
    }

    if (settings.waitingFor === "bathCost") {
        let number = parseInt(text);
        if (!isNaN(number) && number >= 0) {
            settings.bathCost = number;
            settings.waitingFor = "foodExpenses";
            ctx.reply("–í–≤–µ–¥—ñ—Ç—å –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ —ó–∂—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: –Ü–º'—è –°—É–º–∞");
            saveData();
        } else {
            ctx.reply("‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—É–º—É.");
        }
        return;
    }

    if (settings.waitingFor === "foodExpenses") {
        let parts = text.split(" ");
        if (parts.length !== 2) {
            ctx.reply("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: –Ü–º'—è –°—É–º–∞");
            return;
        }

        let name = parts[0].charAt(0).toUpperCase() + parts[0].slice(1);
        let amount = parseInt(parts[1]);

        if (isNaN(amount) || !settings.people.includes(name)) {
            ctx.reply("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º'—è —ñ —Å—É–º—É.");
            return;
        }

        settings.foodExpenses[name] = (settings.foodExpenses[name] || 0) + amount;
        saveData();

        ctx.reply(`‚úÖ ${name} –≤–∏—Ç—Ä–∞—Ç–∏–≤ ${amount} –≥—Ä–Ω –Ω–∞ —ó–∂—É. –ë—ñ–ª—å—à–µ –≤–∏—Ç—Ä–∞—Ç? (–¢–∞–∫/–ù—ñ)`);
        settings.waitingFor = "foodConfirm";
        return;
    }

    if (settings.waitingFor === "foodConfirm") {
        if (text === "—Ç–∞–∫") {
            ctx.reply("–í–≤–µ–¥—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –≤–∏—Ç—Ä–∞—Ç—É –Ω–∞ —ó–∂—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: –Ü–º'—è –°—É–º–∞");
            settings.waitingFor = "foodExpenses";
        } else if (text === "–Ω—ñ") {
            settings.waitingFor = "alcoholExpenses";
            ctx.reply("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –∞–ª–∫–æ–≥–æ–ª—å —É —Ñ–æ—Ä–º–∞—Ç—ñ: –Ü–º'—è –°—É–º–∞");
        }
        return;
    }

    if (settings.waitingFor === "alcoholExpenses") {
        let parts = text.split(" ");
        if (parts.length !== 2) {
            ctx.reply("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: –Ü–º'—è –°—É–º–∞");
            return;
        }

        let name = parts[0].charAt(0).toUpperCase() + parts[0].slice(1);
        let amount = parseInt(parts[1]);

        if (isNaN(amount) || !settings.drinkers.includes(name)) {
            ctx.reply("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º'—è —ñ —Å—É–º—É.");
            return;
        }

        settings.alcoholExpenses[name] = (settings.alcoholExpenses[name] || 0) + amount;
        saveData();

        ctx.reply(`‚úÖ ${name} –≤–∏—Ç—Ä–∞—Ç–∏–≤ ${amount} –≥—Ä–Ω –Ω–∞ –∞–ª–∫–æ–≥–æ–ª—å. –ë—ñ–ª—å—à–µ –≤–∏—Ç—Ä–∞—Ç? (–¢–∞–∫/–ù—ñ)`);
        settings.waitingFor = "alcoholConfirm";
        return;
    }

    if (settings.waitingFor === "alcoholConfirm") {
        if (text === "—Ç–∞–∫") {
            ctx.reply("–í–≤–µ–¥—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –≤–∏—Ç—Ä–∞—Ç—É –Ω–∞ –∞–ª–∫–æ–≥–æ–ª—å —É —Ñ–æ—Ä–º–∞—Ç—ñ: –Ü–º'—è –°—É–º–∞");
            settings.waitingFor = "alcoholExpenses";
        } else if (text === "–Ω—ñ") {
            ctx.reply("‚úÖ –í—Å—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –∑–∞–ø–∏—Å–∞–Ω–æ! –û–±—Ä–æ–±–ª—è—é –¥–∞–Ω—ñ...");
            ctx.reply(calculatePayments());
        }
        return;
    }
});

function calculatePayments() {
    let totalFood = Object.values(settings.foodExpenses).reduce((a, b) => a + b, 0);
    let totalAlcohol = Object.values(settings.alcoholExpenses).reduce((a, b) => a + b, 0);
    let perPersonFood = totalFood / settings.totalPeople;
    let perPersonBath = settings.bathCost / settings.totalPeople;
    let perDrinkerAlcohol = settings.drinkers.length > 0 ? totalAlcohol / settings.drinkers.length : 0;

    let result = `üìä *–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∏—Ç—Ä–∞—Ç:*\n`;
    result += `üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${(totalFood + totalAlcohol + settings.bathCost).toFixed(2)} –≥—Ä–Ω\n`;
    result += `ü•ó –ö–æ–∂–µ–Ω –ø–ª–∞—Ç–∏—Ç—å –∑–∞ —ó–∂—É: ${perPersonFood.toFixed(2)} –≥—Ä–Ω\n`;
    result += `üõÅ –ö–æ–∂–µ–Ω –ø–ª–∞—Ç–∏—Ç—å –∑–∞ –±–∞–Ω—é: ${perPersonBath.toFixed(2)} –≥—Ä–Ω\n`;
    result += `üç∑ –ö–æ–∂–µ–Ω, —Ö—Ç–æ –ø–∏–≤, –ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∞–ª–∫–æ–≥–æ–ª—å: ${perDrinkerAlcohol.toFixed(2)} –≥—Ä–Ω\n\n`;

    settings.people.forEach((name) => {
        let spent = (settings.foodExpenses[name] || 0) + (settings.alcoholExpenses[name] || 0);
        let shouldPay = perPersonFood + perPersonBath + (settings.drinkers.includes(name) ? perDrinkerAlcohol : 0);
        let balance = spent - shouldPay;
        result += balance >= 0 ? `‚úÖ ${name} –ø–µ—Ä–µ–ø–ª–∞—Ç–∏–≤: ${balance.toFixed(2)} –≥—Ä–Ω (–π–æ–º—É –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å)\n` : `‚ùå ${name} –≤–∏–Ω–µ–Ω: ${(-balance).toFixed(2)} –≥—Ä–Ω\n`;
    });

    return result;
}

bot.launch().then(() => console.log("‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î!"));
