require("dotenv").config();
const { Telegraf, Markup } = require("telegraf");
const fs = require("fs");

const BOT_TOKEN = process.env.TELEGRAM_TOKEN;
if (!BOT_TOKEN) {
    throw new Error("‚ùå TELEGRAM_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –î–æ–¥–∞–π –π–æ–≥–æ —É –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.");
}

const bot = new Telegraf(BOT_TOKEN);

const USERS_FILE = "users.json";
const DATA_FILE = "data.json";

let users = fs.existsSync(USERS_FILE) ? JSON.parse(fs.readFileSync(USERS_FILE)) : [];
let settings = fs.existsSync(DATA_FILE) ? JSON.parse(fs.readFileSync(DATA_FILE)) : {
    participants: [],
    drinkers: [],
    bathCost: 0,
    foodExpenses: {},
    alcoholExpenses: {},
    waitingFor: null
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
function saveData() {
    try {
        if (!fs.existsSync(DATA_FILE)) {
            fs.writeFileSync(DATA_FILE, JSON.stringify({}));
        }
        fs.writeFileSync(DATA_FILE, JSON.stringify(settings, null, 2));
        console.log("‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ:", settings);
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É data.json", error);
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
function saveUsers() {
    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));
}

// üìå **–°—Ç–∞—Ä—Ç –±–æ—Ç–∞**
bot.start((ctx) => {
    console.log("üîÑ –ù–æ–≤–∏–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞!");
    settings = {
        participants: [],
        drinkers: [],
        bathCost: 0,
        foodExpenses: {},
        alcoholExpenses: {},
        waitingFor: "selectingParticipants"
    };
    saveData();
    ctx.reply("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤, —è–∫—ñ –±—É–ª–∏ –≤ –±–∞–Ω—ñ:", getUsersMenu());
});

// üìå **–ú–µ–Ω—é –≤–∏–±–æ—Ä—É —É—á–∞—Å–Ω–∏–∫—ñ–≤**
function getUsersMenu() {
    const buttons = users.map((user) => Markup.button.callback(user, `user_${user}`));
    buttons.push(Markup.button.callback("‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ", "add_new"));
    buttons.push(Markup.button.callback("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–±—ñ—Ä", "confirm_users"));
    return Markup.inlineKeyboard(buttons, { columns: 2 });
}

// üìå **–î–æ–¥–∞–≤–∞–Ω–Ω—è —É—á–∞—Å–Ω–∏–∫–∞**
bot.action(/user_(.+)/, (ctx) => {
    const name = ctx.match[1];
    if (!settings.participants.includes(name)) {
        settings.participants.push(name);
    }
    ctx.answerCbQuery(`${name} –¥–æ–¥–∞–Ω–æ!`);
    saveData();
});

// üìå **–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞**
bot.action("add_new", (ctx) => {
    ctx.reply("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞:");
    settings.waitingFor = "newUser";
    saveData();
});

// üìå **–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞**
bot.on("text", (ctx) => {
    const text = ctx.message.text.trim();
    console.log("üì• –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", text);
    console.log("üîç –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Å—Ç–∞–Ω –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é:", settings.waitingFor);

    if (settings.waitingFor === "newUser") {
        if (!users.includes(text)) {
            users.push(text);
            saveUsers();
        }
        ctx.reply(`‚úÖ ${text} –¥–æ–¥–∞–Ω–æ!`, getUsersMenu());
        settings.waitingFor = "selectingParticipants";
        saveData();
        return;
    }
});

// üìå **–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —É—á–∞—Å–Ω–∏–∫—ñ–≤**
bot.action("confirm_users", (ctx) => {
    if (settings.participants.length === 0) {
        ctx.answerCbQuery("‚ùå –°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞!");
        return;
    }
    ctx.reply("–•—Ç–æ –≤–∂–∏–≤–∞–≤ –∞–ª–∫–æ–≥–æ–ª—å? –í–∏–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è –≤—Ä—É—á–Ω—É:", getDrinkersMenu());
    settings.waitingFor = "selectingDrinkers";
    settings.drinkers = [];
    saveData();
});

// üìå **–ú–µ–Ω—é –≤–∏–±–æ—Ä—É —Ç–∏—Ö, —Ö—Ç–æ –ø–∏–≤ –∞–ª–∫–æ–≥–æ–ª—å**
function getDrinkersMenu() {
    const buttons = settings.participants.map((user) => Markup.button.callback(user, `drinker_${user}`));
    buttons.push(Markup.button.callback("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏", "confirm_drinkers"));
    return Markup.inlineKeyboard(buttons, { columns: 2 });
}

// üìå **–î–æ–¥–∞–≤–∞–Ω–Ω—è —É—á–∞—Å–Ω–∏–∫–∞ —É —Å–ø–∏—Å–æ–∫ —Ç–∏—Ö, —Ö—Ç–æ –≤–∂–∏–≤–∞–≤ –∞–ª–∫–æ–≥–æ–ª—å**
bot.action(/drinker_(.+)/, (ctx) => {
    const name = ctx.match[1];
    if (!settings.drinkers.includes(name)) {
        settings.drinkers.push(name);
    }
    ctx.answerCbQuery(`${name} –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É!`);
    saveData();
});

// üìå **–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É —Ç–∏—Ö, —Ö—Ç–æ –ø–∏–≤ –∞–ª–∫–æ–≥–æ–ª—å**
bot.action("confirm_drinkers", (ctx) => {
    settings.waitingFor = "bathCost";
    saveData();
     console.log("üõ†Ô∏è DEBUG: –ü–æ—Ç–æ—á–Ω–∏–π settings:", JSON.stringify(settings, null, 2));
    console.log("üîç –ü–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é settings.waitingFor =", settings.waitingFor);
    console.log("‚ö° –°—Ç–∞–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ: –û—á—ñ–∫—É—î—Ç—å—Å—è –≤–≤–µ–¥–µ–Ω–Ω—è –≤–∞—Ä—Ç–æ—Å—Ç—ñ –±–∞–Ω—ñ!");
    ctx.reply("üí∞ –°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É–≤–∞–ª–∞ –±–∞–Ω—è?");
});

// üìå **–§—ñ–∫—Å–∞—Ü—ñ—è –≤–∞—Ä—Ç–æ—Å—Ç—ñ –±–∞–Ω—ñ**
bot.on("text", (ctx) => {
    const text = ctx.message.text.trim();
    console.log("üü° –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", text);
    console.log("üü° –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω settings.waitingFor =", settings.waitingFor);

    if (settings.waitingFor === "bathCost") {
        console.log("‚úÖ –í—Ö–æ–¥–∏—Ç—å —É –±–ª–æ–∫ –æ–±—Ä–æ–±–∫–∏ bathCost");
        console.log("üõ†Ô∏è DEBUG: –ü–æ—Ç–æ—á–Ω–∏–π settings:", JSON.stringify(settings, null, 2));

        if (!/^\d+$/.test(text)) {
            console.log("‚ùå –ü–æ–º–∏–ª–∫–∞: –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ!");
            ctx.reply("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É —É –≤–∏–≥–ª—è–¥—ñ —á–∏—Å–ª–∞ –±–µ–∑ –±—É–∫–≤ —Ç–∞ —Å–∏–º–≤–æ–ª—ñ–≤.");
            return;
        }

        const amount = parseInt(text, 10);

        if (amount > 0) {
            settings.bathCost = amount;
            settings.waitingFor = "foodExpenses";
            saveData();

            console.log("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ bathCost:", settings.bathCost);
            console.log("‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É –≤–∏—Ç—Ä–∞—Ç –Ω–∞ —ó–∂—É");

            ctx.reply("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ! –¢–µ–ø–µ—Ä –≤–∏–±–µ—Ä—ñ—Ç—å, —Ö—Ç–æ –æ–ø–ª–∞—á—É–≤–∞–≤ —ó–∂—É:", getExpenseMenu("food"));
        } else {
            console.log("‚ùå –ü–æ–º–∏–ª–∫–∞: –≤–≤–µ–¥–µ–Ω–µ —á–∏—Å–ª–æ <= 0");
            ctx.reply("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ –∑–∞ 0.");
        }
        return;
    }
});

// üìå **–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ –±–æ—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –¥–≤—ñ—á—ñ**
bot.launch({
    dropPendingUpdates: true
}).then(() => console.log("‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î!"));
